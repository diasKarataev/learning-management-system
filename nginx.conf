worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    upstream app {
        server host.docker.internal:4000;
    }

    upstream authentication {
        server host.docker.internal:8080;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth {
            proxy_pass http://authentication;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            # Вызываем валидацию токена
            auth_request /auth/validate;
            auth_request_set $auth_status $upstream_status;

            # Проверяем статус авторизации
            if ($auth_status = 200) {
                # Сохраняем ответ от сервера валидации в переменную
                set $auth_response_body $upstream_http_user;
            }

            # Передаем запрос далее, включая сохраненный ответ
            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Auth-Response $auth_response_body; # Передача сохраненного ответа
        }

        location = /auth/validate {
            internal;
            proxy_pass http://authentication/auth/validate-token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;        }

        error_page 401 403 404 = @error;
        location @error {
            return 401;
        }
    }


}
